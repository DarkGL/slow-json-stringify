{"version":3,"file":"sjs.mjs","sources":["../src/_utils.mjs","../src/sjs.mjs","../src/_prepareString.mjs","../src/_makeChunks.mjs","../src/_makeQueue.mjs"],"sourcesContent":["// Reducing object to final value\nconst _deepFind = (obj, path) => path.reduce((a, b) => a && a[b], obj);\n\nconst _makeArr = (array, method) => {\n  if (method === 'array-simple') return JSON.stringify(array);\n\n  // Stringifying more complex array using the provided sjs schema\n  let acc = '';\n  for (const a of array) {\n    acc += method(a) + ',';\n  }\n\n  // Removing last comma.\n  return '[' + acc.substr(0, acc.length - 1) + ']';\n};\n\nconst _validator = (value) => {\n  // Declaring allowed types.\n  const allowedTypes = new Set(['number', 'string', 'boolean', 'undefined', 'array-simple', 'function']);\n\n  if (Array.isArray(value)) {\n    if (allowedTypes.has(value[0]) || allowedTypes.has(typeof value[0])) return;\n\n    // Throwing if inside array is found anything else than \"array-simple\" or new sjs schema\n    throw new Error(`Expected either \"array-simple\" or a function. received ${value}`);\n  } else if (typeof value !== 'function' && !allowedTypes.has(value)) {\n    // Throwing on illegal types\n    // => Mainly protecting users from typo.\n    throw new Error(`Expected one of: \"number\", \"string\", \"boolean\", \"undefined\". received ${value}`);\n  }\n};\n\n// Little utility for escaping convenience.\n// => if no regex is provided, a default one will be used.\nconst escape = (regex) => {\n  const usedRegex = regex || new RegExp('\\\\n|\\\\r|\\\\t|\\\\\"|\\\\\\\\', 'gm');\n\n  return str => str.replace(usedRegex, char => '\\\\' + char);\n};\n\nexport {\n  _deepFind,\n  _makeArr,\n  _validator,\n  escape,\n};\n","import _prepareString from './_prepareString';\nimport _makeQueue from './_makeQueue';\nimport _makeChunks from './_makeChunks';\nimport { _deepFind, _makeArr, escape } from './_utils';\n\nconst wrapper = chunks => (value, index) => {\n  if (typeof value !== 'undefined') return value;\n\n  // Checking if template is already wrapping value in double quotes.\n  const current = chunks[index];\n  if (current.charCodeAt(current.length - 1) === 34) return value;\n  return '\"' + value + '\"';\n};\n\n\n// Doing a lot of preparation work before returning the final function responsible for\n// the stringification.\nconst sjs = (schema) => {\n  const preparedString = _prepareString(schema);\n\n  // Building regex that match every prop => Used to enqueue props\n  // => So they will be picked in correct order when building final string.\n  const regex = new RegExp('\"(string__sjs|number__sjs|boolean__sjs|undefined__sjs)\"|\\\\[(.*?)\\\\]', 'gm');\n\n  const chunks = _makeChunks(preparedString, regex);\n  const lastChunk = chunks[chunks.length - 1];\n  const readyOrWrapped = wrapper(chunks);\n\n  const preparedSchema = JSON.parse(preparedString);\n\n  // Providing preparedSchema for univocal correspondence between created queue and chunks.\n  // Provided original schema to keep track of the original properties that gets destroied\n  // during schema preparation => e.g. array stringification method.\n  const queue = _makeQueue(preparedSchema, schema);\n\n  const { length } = queue;\n  // Exposed function\n  return (obj) => {\n    let temp = '';\n\n    // Ditching old implementation for a **MUCH** faster while\n    let i = 0;\n    while (true) {\n      if (i === length) break;\n      const { path, method, isArray } = queue[i];\n      const raw = _deepFind(obj, path);\n\n      // An array needs a different treatment\n      // => This will make possible the stringification of an arbitrary number of arrais\n      const ready = isArray\n        ? _makeArr(raw, method)\n        : raw;\n      temp += chunks[i] + readyOrWrapped(ready, i);\n\n      i += 1;\n    }\n\n    return temp + lastChunk;\n  };\n};\n\nexport {\n  sjs,\n  escape,\n};\n","import { _validator } from './_utils';\n\nexport default schema => JSON.stringify(schema, (prop, value) => {\n  const isArray = Array.isArray(value);\n  if (typeof value !== 'object' || isArray) {\n    // Check if the provided schema is correct\n    _validator(value);\n\n    if (isArray) return value;\n\n    // Type checking is useful as if not performed the resulting string\n    // will have all the function text inside it.\n    // Adding __sjs at the end of the value as there could be an object\n    // property called `string` or `number`, etc...\n    // Adding __sjs at the end is a proof of value not being also an object property.\n    return typeof value === 'function' ? value : `${value}__sjs`;\n  }\n  return value;\n});\n","export default (str, regex) => str\n  .replace(regex, (type) => {\n    switch (type) {\n      // returning __par__ enclosed by \"\"\n      // => When splitting there will be a \" on each side.\n      case '\"string__sjs\"':\n      case '\"undefined__sjs\"':\n        return '\"__par__\"';\n\n      // When stringifying a function inside an array [null] is returned.\n      // => Using [null] as an identifier for array schema.\n      case '\"number__sjs\"':\n      case '\"boolean__sjs\"':\n      case '[\"array-simple__sjs\"]':\n      case '[null]':\n        return '__par__';\n      default:\n        return type;\n    }\n  })\n  .split('__par__');\n","import { _deepFind } from './_utils';\n\nexport default (preparedSchema, originalSchema) => {\n  const queue = [];\n\n  // Storing the allowed types is useful to know if we are arrived at the deepest level.\n  // If the current value is one of types => the accumulator is storing the path to reach the\n  // target prop.\n  const allowedValues = new Set(['number__sjs', 'string__sjs', 'boolean__sjs', 'undefined__sjs']);\n\n  // Defining a function inside an other function is slow.\n  // However it's OK for this use case as the queue creation is not time critical.\n  (function scoped(obj, acc = []) {\n    const isArray = Array.isArray(obj);\n    if (allowedValues.has(_deepFind(preparedSchema, acc)) || isArray) {\n      queue.push({\n        // Storing iside a unique queue is the current prop is an array or not\n        isArray,\n        // If the current prop is an array, the array stringification method is stored too.\n        // The method for the array stringification, in SJS, is always stored at 0 position.\n        method: (() => {\n          if (!isArray) return false;\n          if (typeof obj[0] === 'string') return 'array-simple';\n\n          // In the prepared schema, due to making the chunks, the functions provided\n          // are converted into NULL.\n          // So, the method is retrieved from the original schema.\n          return _deepFind(originalSchema, acc)[0];\n        })(),\n\n        // The accumulator is geting one level deeper on each recursive\n        // iteration => flattening on each insertion.\n        // Wrapping `acc` inside an array because, if the prop is found at top level,\n        // a string is pushed inside the queue. Making it already an array will avoid\n        // a type check during stringification as the `deepFind` function accepts an array\n        // as argument.\n        path: [acc].flat(),\n      });\n      return;\n    }\n\n    // Recursively going deeper.\n    // NOTE: While going deeper, the current prop is pushed into the accumulator\n    // to keep track of the position inside of the object.\n    return Object\n      .keys(obj)\n      .map(prop => scoped(obj[prop], [...acc, prop]));\n  })(preparedSchema);\n\n  return queue;\n};\n"],"names":["const","_deepFind","obj","path","reduce","a","b","_makeArr","array","method","JSON","stringify","acc","substr","length","escape","regex","usedRegex","RegExp","str","replace","char","sjs","schema","preparedString","prop","value","isArray","Array","allowedTypes","Set","has","Error","_validator","_prepareString","chunks","type","split","_makeChunks","lastChunk","readyOrWrapped","index","current","charCodeAt","wrapper","queue","preparedSchema","originalSchema","allowedValues","scoped","Object","keys","map","push","flat","_makeQueue","parse","temp","i","raw","ready"],"mappings":"AACAA,IAAMC,WAAaC,EAAKC,UAASA,EAAKC,gBAAQC,EAAGC,UAAMD,GAAKA,EAAEC,IAAIJ,IAE5DK,WAAYC,EAAOC,MACR,iBAAXA,EAA2B,OAAOC,KAAKC,UAAUH,WAGjDI,EAAM,SACMJ,kBACdI,GAAOH,QAAY,UAId,IAAMG,EAAIC,OAAO,EAAGD,EAAIE,OAAS,GAAK,KAqBzCC,WAAUC,OACRC,EAAYD,GAAS,IAAIE,OAAO,uBAAwB,sBAEvDC,UAAOA,EAAIC,QAAQH,WAAWI,SAAQ,KAAOA,MCpBhDC,WAAOC,OACLC,WChBOD,UAAUb,KAAKC,UAAUY,WAASE,EAAMC,OAC/CC,EAAUC,MAAMD,QAAQD,SACT,iBAAVA,GAAsBC,YFYfD,OAEZG,EAAe,IAAIC,IAAI,CAAC,SAAU,SAAU,UAAW,YAAa,eAAgB,gBAEtFF,MAAMD,QAAQD,GAAQ,IACpBG,EAAaE,IAAIL,EAAM,KAAOG,EAAaE,WAAWL,EAAM,IAAK,aAG/D,IAAIM,gEAAgEN,GACrE,GAAqB,mBAAVA,IAAyBG,EAAaE,IAAIL,SAGpD,IAAIM,+EAA+EN,GEtBzFO,CAAWP,GAEPC,EAAgBD,EAOI,mBAAVA,EAAuBA,EAAWA,WAE3CA,IDCgBQ,CAAeX,GAMhCY,WExBQhB,EAAKH,UAAUG,EAC5BC,QAAQJ,WAAQoB,UACPA,OAGD,oBACA,yBACI,gBAIJ,oBACA,qBACA,4BACA,eACI,yBAEAA,KAGZC,MAAM,WFIQC,CAAYd,EAFb,IAAIN,OAAO,sEAAuE,OAG1FqB,EAAYJ,EAAOA,EAAOrB,OAAS,GACnC0B,WArBQL,mBAAWT,EAAOe,WACX,IAAVf,EAAuB,OAAOA,MAGnCgB,EAAUP,EAAOM,UACwB,KAA3CC,EAAQC,WAAWD,EAAQ5B,OAAS,GAAkBY,EACnD,IAAMA,EAAQ,KAeEkB,CAAQT,GAOzBU,WG/BQC,EAAgBC,OACxBF,EAAQ,GAKRG,EAAgB,IAAIlB,IAAI,CAAC,cAAe,cAAe,eAAgB,mCAInEmB,EAAO/C,EAAKU,kBAAM,QACpBe,EAAUC,MAAMD,QAAQzB,OAC1B8C,EAAcjB,IAAI9B,EAAU6C,EAAgBlC,MAASe,SA8BlDuB,OACJC,KAAKjD,GACLkD,aAAI3B,UAAQwB,EAAO/C,EAAIuB,GAAWb,UAAKa,OA/BxCoB,EAAMQ,KAAK,SAET1B,EAGAlB,SACOkB,IACiB,iBAAXzB,EAAI,GAAwB,eAKhCD,EAAU8C,EAAgBnC,GAAK,IASxCT,KAAM,CAACS,GAAK0C,UAWfR,GAEID,EHhBOU,CALS7C,KAAK8C,MAAMhC,GAKOD,8BAIjCrB,WACFuD,EAAO,GAGPC,EAAI,EAEFA,IAAM5C,GADC,OAEuB+B,EAAMa,0BAClCC,EAAM1D,EAAUC,UAIhB0D,EAAQjC,EACVpB,EAASoD,EAAKlD,GACdkD,EACJF,GAAQtB,EAAOuB,GAAKlB,EAAeoB,EAAOF,GAE1CA,GAAK,SAGAD,EAAOlB"}