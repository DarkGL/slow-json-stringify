{"version":3,"file":"sjs.js","sources":["../src/_utils.mjs","../src/sjs.mjs","../src/_dissectSchema.mjs","../src/_makeQueue.mjs"],"sourcesContent":["// Recursively building an array containing the path of a property in an object.\n// => e.g.\n//      const test = {\n//        a: {\n//          b: {\n//            c: 'test'\n//          }\n//        }\n//      }\n//      deepPath(test, 'c') // ['a', 'b', 'c']\nconst _deepPath = (obj, target) => {\n  for (const key in obj) {\n    if (key === target) return [key];\n    if (obj[key] && typeof obj[key] === 'object') {\n      const result = _deepPath(obj[key], target);\n      if (result) {\n        result.unshift(key);\n        return result;\n      }\n    }\n  }\n};\n\n// Reducing object to final value\nconst _deepFind = (obj, path) => path.reduce((a, b) => a && a[b], obj);\n\nconst _makeArr = (array, method) => {\n  if (method === 'array-simple') return JSON.stringify(array);\n\n  // Stringifying more complex array using the provided sjs schema\n  let acc = '';\n  for (const a of array) {\n    acc += method(a) + ',';\n  }\n\n  // Removing last comma.\n  return '[' + acc.substr(0, acc.length - 1) + ']';\n};\n\n// const _allowedTypes = new Set(['number', 'string', 'boolean', 'undefined', 'array-simple', 'function']);\n\nconst _validator = (value) => {\n  // Declaring allowed types.\n  const allowedTypes = new Set(['number', 'string', 'boolean', 'undefined', 'array-simple', 'function']);\n\n  if (Array.isArray(value)) {\n    if (allowedTypes.has(value[0]) || allowedTypes.has(typeof value[0])) return;\n\n    // Throwing if inside array is found anything else than \"array-simple\" or new sjs schema\n    throw new Error(`Expected either \"array-simple\" or a function. received ${value}`);\n  } else if (typeof value !== 'function' && !allowedTypes.has(value)) {\n    // Throwing on illegal types\n    // => Mainly protecting users from typo.\n    throw new Error(`Expected one of: \"number\", \"string\", \"boolean\", \"undefined\". received ${value}`);\n  }\n};\n\n// Little utility for escaping convenience.\n// => if no regex is provided, a default one will be used.\nconst escape = (regex) => {\n  const usedRegex = regex || new RegExp('\\\\n|\\\\r|\\\\t|\\\\\"|\\\\\\\\', 'gm');\n\n  return str => str.replace(usedRegex, char => '\\\\' + char);\n};\n\nconst _scv = (parentObj, allowed) => {\n  const queue = [];\n\n  // Storing the allowed types is useful to know if we are arrived at the deepest level.\n  // If the current value is one of types => the accumulator is storing the path to reach the\n  // target prop.\n  const types = new Set(allowed);\n\n  // Defining a function inside an other function is slow.\n  // However it's OK for this use case as the queue creation is not time critical.\n  (function scoped(obj, acc = []) {\n    const isArray = Array.isArray(obj);\n    if (types.has(_deepFind(parentObj, acc)) || isArray) {\n      queue.push({\n        // Storing iside a unique queue is the current prop is an array or not\n        isArray,\n        // If the current prop is an array, the array stringification method is stored too.\n        // The method for the array stringification, in SJS, is always stored at 0 position.\n        method: isArray && obj[0],\n\n        // The accumulator is geting one level deeper on each recursive\n        // iteration => flattening on each insertion.\n        // Wrapping `acc` inside an array because, if the prop is found at top level,\n        // a string is pushed inside the queue. Making it already an array will avoid\n        // a type check during stringification as the `deepFind` function accepts an array\n        // as argument.\n        path: [acc].flat(),\n        type: obj,\n      });\n      return;\n    }\n\n    // Recursively going deeper.\n    // NOTE: While going deeper, the current prop is pushed into the accumulator\n    // to keep track of the position inside of the object.\n    return Object\n      .keys(obj)\n      .map(prop => scoped(obj[prop], [...acc, prop]));\n  })(parentObj);\n\n  return queue;\n};\n\nexport {\n  _deepPath,\n  _deepFind,\n  _makeArr,\n  _validator,\n  _scv,\n  escape,\n};\n","import _dissectSchema from './_dissectSchema';\nimport _makeQueue from './_makeQueue';\nimport { _deepFind, _makeArr, _validator, _allowedTypes, escape } from './_utils';\n\nconst wrapper = chunks => (value, index) => {\n  if (typeof value !== 'undefined') return value;\n\n  // Checking if template is already wrapping value in double quotes.\n  const current = chunks[index];\n  if (current.charCodeAt(current.length - 1) === 34) return value;\n  return '\"' + value + '\"';\n};\n\n\n// Doing a lot of preparation work before returning the final function responsible for\n// the stringification.\nconst sjs = (schema) => {\n  const { str, queue } = _dissectSchema(schema);\n\n  // Building regex that match every prop => Used to enqueue props\n  // => So they will be picked in correct order when building final string.\n  const regex = new RegExp('\"(string__sjs|number__sjs|boolean__sjs|undefined__sjs)\"|\\\\[(.*?)\\\\]', 'gm');\n\n  const { chunks } = _makeQueue(str, regex);\n  const lastChunk = chunks[chunks.length - 1];\n  const readyOrWrapped = wrapper(chunks);\n\n  const { length } = queue;\n  // Exposed function\n  return (obj) => {\n    let temp = '';\n\n    // Ditching old implementation for a **MUCH** faster while\n    let i = 0;\n    while (true) {\n      if (i === length) break;\n      const { path, method, isArray } = queue[i];\n      const raw = _deepFind(obj, path);\n\n      // An array needs a different treatment\n      // => This will make possible the stringification of an arbitrary number of arrais\n      const ready = isArray\n        ? _makeArr(raw, method)\n        : raw;\n      temp += chunks[i] + readyOrWrapped(ready, i);\n\n      i += 1;\n    }\n\n    return temp + lastChunk;\n  };\n};\n\nexport {\n  sjs,\n  escape,\n};\n","import { _validator, _scv } from './_utils';\n\nexport default (schema) => {\n  // `str` in the end is simply the native stringification of schema.\n  // => JSON.stringify is used only for convenience.\n  const str = JSON.stringify(schema, (prop, value) => {\n    const isArray = Array.isArray(value);\n    if (typeof value !== 'object' || isArray) {\n      _validator(value);\n\n      if (isArray) return value;\n\n      // Type checking is useful as if not performed the resulting string\n      // will have all the function text inside it.\n      // Adding __sjs at the end of the value as there could be an object\n      // property called `string` or `number`, etc...\n      // Adding __sjs at the end is a proof of value not being also an object property.\n      return typeof value === 'function' ? value : `${value}__sjs`;\n    }\n    return value;\n  });\n\n  return { str, queue: _scv(schema, ['string', 'number', 'boolean', 'array']) };\n};\n","export default (str, regex) => {\n  const queue = [];\n\n  // Replacing types with a string that will make possible:\n  // - Inserting value without adding / removing additional charachters.\n  // - Split templated string in chunks for easier / faster insertion\n  const chunks = str\n    .replace(regex, (type) => {\n      switch (type) {\n        // returning __par__ enclosed by \"\"\n        // => When splitting there will be a \" on each side.\n        case '\"string__sjs\"':\n        case '\"undefined__sjs\"':\n          return '\"__par__\"';\n\n        // When stringifying a function inside an array [null] is returned.\n        // => Using [null] as an identifier for array schema.\n        case '\"number__sjs\"':\n        case '\"boolean__sjs\"':\n        case '[\"array-simple__sjs\"]':\n        case '[null]':\n          return '__par__';\n        default:\n          // Pushing prop to queue => prop is enclosed by \"\" => matching before pushing\n          const prop = type.match(/(?<=\\\").+?(?=\\\")/)[0];\n          queue.push(prop);\n          return type;\n      }\n    })\n    .split('__par__');\n\n  return { queue, chunks };\n};\n"],"names":["const","_deepFind","obj","path","reduce","a","b","_makeArr","array","method","JSON","stringify","acc","substr","length","schema","parentObj","allowed","queue","types","prop","value","isArray","Array","allowedTypes","Set","has","Error","_validator","scoped","Object","keys","map","push","flat","type","_dissectSchema","str","regex","chunks","replace","match","split","_makeQueue","RegExp","lastChunk","readyOrWrapped","index","current","charCodeAt","wrapper","temp","i","raw","ready","usedRegex","char"],"mappings":"AAwBAA,IAAMC,WAAaC,EAAKC,UAASA,EAAKC,gBAAQC,EAAGC,UAAMD,GAAKA,EAAEC,IAAIJ,IAE5DK,WAAYC,EAAOC,MACR,iBAAXA,EAA2B,OAAOC,KAAKC,UAAUH,WAGjDI,EAAM,SACMJ,kBACdI,GAAOH,QAAY,UAId,IAAMG,EAAIC,OAAO,EAAGD,EAAIE,OAAS,GAAK,0BCpBlCC,kBCdGA,OF+DFC,EAAWC,EACjBC,EAKAC,QEjDC,KAjBKT,KAAKC,UAAUI,WAASK,EAAMC,OAClCC,EAAUC,MAAMD,QAAQD,SACT,iBAAVA,GAAsBC,YFkCjBD,OAEZG,EAAe,IAAIC,IAAI,CAAC,SAAU,SAAU,UAAW,YAAa,eAAgB,gBAEtFF,MAAMD,QAAQD,GAAQ,IACpBG,EAAaE,IAAIL,EAAM,KAAOG,EAAaE,WAAWL,EAAM,IAAK,aAG/D,IAAIM,gEAAgEN,GACrE,GAAqB,mBAAVA,IAAyBG,EAAaE,IAAIL,SAGpD,IAAIM,+EAA+EN,GE7CvFO,CAAWP,GAEPC,EAAgBD,EAOI,mBAAVA,EAAuBA,EAAWA,WAE3CA,IAGKH,OF2CFF,EE3CcD,EF2CHE,EE3CW,CAAC,SAAU,SAAU,UAAW,SF4C5DC,EAAQ,GAKRC,EAAQ,IAAIM,IAAIR,YAIZY,EAAO3B,EAAKU,kBAAM,QACpBU,EAAUC,MAAMD,QAAQpB,OAC1BiB,EAAMO,IAAIzB,EAAUe,EAAWJ,MAASU,SAuBrCQ,OACJC,KAAK7B,GACL8B,aAAIZ,UAAQS,EAAO3B,EAAIkB,GAAWR,UAAKQ,OAxBxCF,EAAMe,KAAK,SAETX,EAGAb,OAAQa,GAAWpB,EAAI,GAQvBC,KAAM,CAACS,GAAKsB,OACZC,KAAMjC,KAWTc,GAEIE,ICxFgBkB,CAAerB,wBEjBxBsB,EAAKC,OACbpB,EAAQ,GAKRqB,EAASF,EACZG,QAAQF,WAAQH,UACPA,OAGD,oBACA,yBACI,gBAIJ,oBACA,qBACA,4BACA,eACI,sBAGDf,EAAOe,EAAKM,MAAM,oBAAoB,UAC5CvB,EAAMe,KAAKb,GACJe,KAGZO,MAAM,iBAEF,OAAExB,SAAOqB,GFRGI,OAFL,IAAIC,OAAO,sEAAuE,cAG1FC,EAAYN,EAAOA,EAAOzB,OAAS,GACnCgC,WArBQP,mBAAWlB,EAAO0B,WACX,IAAV1B,EAAuB,OAAOA,MAGnC2B,EAAUT,EAAOQ,UACwB,KAA3CC,EAAQC,WAAWD,EAAQlC,OAAS,GAAkBO,EACnD,IAAMA,EAAQ,KAeE6B,CAAQX,8BAIvBrC,WACFiD,EAAO,GAGPC,EAAI,EAEFA,IAAMtC,GADC,OAEuBI,EAAMkC,0BAClCC,EAAMpD,EAAUC,UAIhBoD,EAAQhC,EACVf,EAAS8C,EAAK5C,GACd4C,EACJF,GAAQZ,EAAOa,GAAKN,EAAeQ,EAAOF,GAE1CA,GAAK,SAGAD,EAAON,4BDUFP,OACRiB,EAAYjB,GAAS,IAAIM,OAAO,uBAAwB,sBAEvDP,UAAOA,EAAIG,QAAQe,WAAWC,SAAQ,KAAOA"}